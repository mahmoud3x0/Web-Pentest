import requests
import hashlib
import validators

def check_response(url, header, value):
    headers = {
        header: value,
        "User-Agent": "Mozilla/5.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br"
    }

    response1 = requests.get(url)
    content_length1 = len(response1.content)
    hash_value1 = hashlib.sha256(response1.content).hexdigest()

    response2 = requests.get(url, headers=headers)
    if response2.status_code == 200:
        content_length2 = len(response2.content)
        hash_value2 = hashlib.sha256(response2.content).hexdigest()
        return content_length1 == content_length2 and hash_value1 == hash_value2 #same response, it accepted your domain!

def host_header_attack(url):
    host_injection = 0
    host_injection = check_response(url, "Host", "mahmoud3x0.com") or check_response(url, "X-Forwarded-For", "mahmoud3x0.com") or check_response(url, "X-Forwarded-Host", "mahmoud3x0.com")


    virtual_host = 1
    with open("virtual_host_enum.txt", "r") as file:
        for host in file:
            host = host.strip()
            # virtual_host = check_response(url, "Host", host)
            # virtual_host = check_response(url, "X-Forwarded-For", host)
            virtual_host = check_response(url, "X-Forwarded-Host", host)

    if host_injection:
        print("[+] possible vulnerable to host header attacks")
    # Different responses of fuzzing
    if not virtual_host:
        print("[+] possible vulnerable to virtual host enumeration")
    if not host_injection and virtual_host:
        print("[-] not vulnerable!")


if __name__ == "__main__":

    url = input("Enter the target url: ")

    host_header_attack(url)
