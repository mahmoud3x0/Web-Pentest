import requests
import validators
import re
import tldextract

def add_header(original_headers, new_headers):
    merged_headers = {**original_headers, **new_headers}
    return merged_headers


def check_origin(url, headers, origin):
    headers["Origin"] = origin
    response = requests.get(url, headers=headers)
    return "Access-Control-Allow-Origin" in response.headers and response.headers["Access-Control-Allow-Origin"] == origin

def CORS(url, cookie):

    headers = {
        "Cookie": f"session={cookie}",
        "Origin": "*",
        "User-Agent": "Mozilla/5.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br"
    }
    if not validators.url(url):
        raise ValueError("Invalid URL format")
    else:
        domain = tldextract.extract(url)
        # check credentials
        credentials = 0
        response = requests.get(url)
        response = requests.get(url, headers=headers)
        credentials |= "Access-Control-Allow-Credentials" in response.headers and response.headers["Access-Control-Allow-Credentials"] == "true"


        # check wildcard
        wildcard = check_origin(url, headers, "*")

        # check attacker as origin
        attacker_origin = check_origin(url, headers, "attacker_origin.com")

        # check null origin
        null_origin = check_origin(url, headers, "attacker_origin.com")

        # check subdomain
        subdomain = check_origin(url, headers, f"test.{domain.registered_domain}")

        # check subdomain for subdomain
        subdomain_for_subdomain = check_origin(url, headers, f"test1.test2.{domain.registered_domain}")

        # check pre domain
        pre_domain = check_origin(url, headers, f"test{domain.registered_domain}")

        # check post domain
        post_domain = check_origin(url, headers, f"{domain.domain}test.{domain.suffix}")

        # check underscore
        underscore = check_origin(url, headers, f"test_{domain.registered_domain}")
        underscore |= check_origin(url, headers, f"{domain.domain}_test.{domain.suffix}")


        # check domain as subdomain
        domain_subdomain = check_origin(url, headers, f"{domain.domain}.attacker.com")

        # check domain and tld as subdomain
        domain_tld_subdomain = check_origin(url, headers, f"{domain.registered_domain}.attacker.com")

        # check on top 200 domains as third party
        # third_party = []
        # with open("top_200_domains.txt", 'r') as file:
        #     for line in file:
        #         if check_origin_get_method(url, headers, f"test1.test2.{domain}"):
        #             third_party.append(line)

        flag = (wildcard or attacker_origin or null_origin or subdomain or sundomain_for_subdomain or pre_domain or post_domain or underscore or domain_subdomain or domain_tld_subdomain)

        if flag:
            if credentials:
                print("[+] Potential CORS Misconfiguration with Credentials")
            else:
                print("[+] Possible CORS Misconfiguration")
                if wildcard:
                    print("[+] Wildcard reflection")
                if attacker_origin:
                    print("[+] Any malicious domain reflection")
                if null_origin:
                    print("[+] Null origin reflection")
                if subdomain:
                    print(f"[+] Subdomain for reflection (test.{domain.registered_domain})")
                if subdomain_for_subdomain:
                    print(f"[+] Subdomain for subdomain reflection (test1.test2.{domain.registered_domain})")
                if pre_domain:
                    print(f"[+] Pre domain reflection (test{domain.registered_domain})")
                if post_domain:
                    print(f"[+] Post domain reflection ({domain.domain}test.{domain.suffix})")
                if underscore:
                    print(f"[+] crafted domain with underscore reflection (test_{domain.registered_domain}, {domain.domain}_test.{domain.suffix})")
                if domain_subdomain:
                    print(f"[+] domain as subdomain reflection ({domain.domain}.attacker.com)")
                if domain_tld_subdomain:
                    print(f"[+] domain with top level domain as subdomain reflection ({domain.registered_domain}.attacker.com)")
                # if len(third_party) > 0:
                #     print("Can use third party as your origin of:")
                #     for third in third_party:
                #         print(third, end=' ')
                #


if __name__ == "__main__":
    #url = input("Enter the target url: ")
    url = "https://0acc00ca041c1c7680d7176f002300e9.web-security-academy.net/accountDetails"
    #cookie = input("Enter your cookie ")
    cookie = "k0wWqx2RPcyCrxZrvYk4M25VIaWAwZNh"
    CORS(url, cookie)
